name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12]
        database: [sqlite, postgresql]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mtg_trader_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        if [ "${{ matrix.database }}" = "postgresql" ]; then
          pip install psycopg2-binary
        fi
    
    - name: Set up database
      run: |
        if [ "${{ matrix.database }}" = "postgresql" ]; then
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/mtg_trader_test"
        else
          export DATABASE_URL="sqlite:///test.db"
        fi
    
    - name: Run tests
      env:
        DATABASE_URL: ${{ matrix.database == 'postgresql' && 'postgresql://postgres:postgres@localhost:5432/mtg_trader_test' || 'sqlite:///test.db' }}
      run: |
        pytest tests/ -v --cov=mtg_buylist_aggregator --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run Black
      run: black --check --diff mtg_buylist_aggregator/ tests/
    
    - name: Run Flake8
      run: flake8 mtg_buylist_aggregator/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run MyPy
      run: mypy mtg_buylist_aggregator/ --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: bandit -r mtg_buylist_aggregator/ -f json -o bandit-report.json || true
    
    - name: Run Safety check
      run: safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    needs: [test, lint, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Deploy to PyPI (conditional)
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        # Check if PyPI token is available
        if [ -n "${{ secrets.PYPI_API_TOKEN }}" ]; then
          echo "Deploying to PyPI..."
          echo "__token__" > ~/.pypirc
          echo "${{ secrets.PYPI_API_TOKEN }}" >> ~/.pypirc
          twine upload dist/*
        else
          echo "‚ö†Ô∏è  Skipping PyPI deployment - PYPI_API_TOKEN not configured"
          echo "üìù To enable PyPI deployment:"
          echo "   1. Go to your PyPI account and create an API token"
          echo "   2. Go to this repository's Settings ‚Üí Secrets and variables ‚Üí Actions"
          echo "   3. Add a new repository secret named 'PYPI_API_TOKEN'"
          echo "   4. Set the value to your PyPI API token"
          echo "   5. The next tagged release will automatically deploy to PyPI"
        fi
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this Release
          
          Automated release from CI/CD pipeline.
          
          ### Features
          - SQLAlchemy database layer with PostgreSQL support
          - Comprehensive test suite
          - Automated CI/CD pipeline
          - Security scanning
          
          ### Technical Improvements
          - Database migration tools
          - Performance optimizations
          - Code quality improvements
        draft: false
        prerelease: false 